version:                       2

jobs:

  dependencyUpdates:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # dependencyUpdates
      - run:
          name:                Checking dependency updates
          command:             ./gradlew androidDependencies dependencyUpdates --profile
      - store_artifacts:
          path:                build/reports/profile/
          destination:         profile
      - store_artifacts:
          path:                build/dependencyUpdates
          destination:         dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key:                 v1-dependencies-{{ checksum "build.gradle" }}


  unit_app:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # unit_app
      - run:
          name: Running :app:test
          command: ./gradlew :app:test
      - store_artifacts:
          path: app/build/reports/tests/
          destination: unit

      - run:
          name: Save test results
          command: |
            mkdir -p ~/unit/xml/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/unit/xml/ \;
      - store_test_results:
          path: ~/unit/xml
      - store_artifacts:
          path: ~/unit/xml
          destination: junit


  lint:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # lint
      - run:
          name:                Running lint
          command:             ./gradlew lint --profile
      - store_artifacts:
          path:                build/reports/profile/
          destination:         profile
      - store_artifacts:
          path:                app/build/reports/
          destination:         app/


  ktlint:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # ktlint
      - run:
          name:                Running ktlintCheck
          command:             ./gradlew --continue ktlintCheck --profile
      - store_artifacts:
          path:                build/reports/profile/
          destination:         profile
      - store_artifacts:
          path:                app/build/reports/ktlint
          destination:         app


  detekt:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # detekt
      - run:
          name:                Running detekt
          command:             ./gradlew detekt --profile
      - store_artifacts:
          path:                build/reports/profile/
          destination:         profile
      - store_artifacts:
          path:                app/build/reports/detekt
          destination:         app


  coverage:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # coverage
      - run:
          name:                Running jacocoTestReportDebug jacocoTestReportMerged
          command:             |
            ./gradlew jacocoTestReportRelease
            ./gradlew jacocoTestReportMerged
      - store_artifacts:
          path:                build/reports/profile/
          destination:         profile
      - store_artifacts:
          path:                build/reports/jacoco
          destination:         jacoco


  robo:
    docker:
      - image:                 circleci/android:api-28-node8-alpha

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum ".dependencies/dependencies.gradle" }}
            - v1-dependencies-

      - run:
          name:                Downloading dependencies
          command:             ./gradlew androidDependencies


      # robo
      - run:
          name:                Authorize gcloud and set config defaults
          command:             |
            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            sudo gcloud auth activate-service-account ${FIREBASE_SERVICE_ACCOUNT} --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud config set account ${FIREBASE_SERVICE_ACCOUNT}
      - run:
          name:                Build debug APK and release APK
          command:             |
            ./gradlew :application-test:assembleDebug
            ./gradlew :application-test:assembleDebugAndroidTest
      - run:
          name:                Test with Firebase Test Lab
          command:             sudo gcloud firebase test android run
            --type robo
            --app application-test/build/outputs/apk/debug/application-test-debug.apk
            --device model=star2qlteue,version=26,locale=de,orientation=portrait
            --timeout 90s
          # --results-bucket cloud-test-${GOOGLE_PROJECT_ID}
          # --timeout 90s


  assemble:

    docker:
      - image:                 circleci/android:api-28-node8-alpha

    environment:
      JVM_OPTS:                -Xmx2048m
      GRADLE_OPTS:             -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-


      # assemble
      - run:                   |
            ./gradlew assembleDebug
            ./gradlew assembleDebug

      - store_artifacts:
          path:                app/build/outputs/apk/debug/
          destination:         debug

      - store_artifacts:
          path:                app/build/outputs/apk/release/
          destination:         release


workflows:
  version:                     2
  pull_request:
    jobs:
      - dependencyUpdates:
          filters:
            branches:
              ignore:
                - master
      - unit_app:
          requires:
            - dependencyUpdates
      - lint:
          requires:
            - unit_app
      - ktlint:
          requires:
            - unit_app
      - detekt:
          requires:
            - unit_app
      - coverage:
          requires:
            - unit_app
      - assemble:
          requires:
            - coverage
            - detekt
            - ktlint
            - lint

  release:
    jobs:
      - assemble:
          filters:
            branches:
              only:
                - master